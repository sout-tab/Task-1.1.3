package jm.task.core.jdbc.dao;

import jm.task.core.jdbc.model.User;
import jm.task.core.jdbc.util.Util;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class UserDaoJDBCImpl implements UserDao {

    private static final String CREATE_TABLE = "CREATE TABLE IF NOT EXISTS Task_1_3(" +
            "id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY," +
            "name VARCHAR," +
            "last_name VARCHAR," +
            "age INT)";

    private static final String DROP_TABLE = "DROP TABLE IF EXISTS Task_1_3";

    private static final String SAVE_USER = "INSERT INTO Task_1_3(name, last_name, age)" +
            "VALUES (?, ?, ?)";

    private static final String REMOVE_BY_ID = "DELETE FROM Task_1_3 WHERE id=?";
    private static final String GET_ALL_USERS = "SELECT * FROM Task_1_3";
    private static final String CLEAN_TABLE = "TRUNCATE TABLE Task_1_3";

    public UserDaoJDBCImpl() {

    }

    public void createUsersTable() {
        try(Connection connection = Util.getConnection()) {
            Statement statement = connection.createStatement();
            statement.executeUpdate(CREATE_TABLE);

            System.out.println("Таблица создана!");

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void dropUsersTable() {
        try(Connection connection = Util.getConnection()) {
            Statement statement = connection.createStatement();
            statement.executeUpdate(DROP_TABLE);

            System.out.println("Таблица удалена!");

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void saveUser(String name, String lastName, byte age) {
        try(Connection connection = Util.getConnection()) {
            PreparedStatement preparedStatement =
                    connection.prepareStatement(SAVE_USER);

            preparedStatement.setString(1, name);
            preparedStatement.setString(2, lastName);
            preparedStatement.setByte(3, age);
            preparedStatement.executeUpdate();

            System.out.println("User с именем- " + name + " добавлен в базу данных");

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void removeUserById(long id) {
        try(Connection connection = Util.getConnection()) {
            PreparedStatement preparedStatement =
                    connection.prepareStatement(REMOVE_BY_ID);

            preparedStatement.setLong(1, id);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public List<User> getAllUsers() {
        List<User> users = new ArrayList<>();

        try(Connection connection = Util.getConnection()) {
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(GET_ALL_USERS);

            while (resultSet.next()) {
                User user = new User();
                user.setId(resultSet.getLong("id"));
                user.setName(resultSet.getString("name"));
                user.setLastName(resultSet.getString("last_name"));
                user.setAge(resultSet.getByte("age"));
                users.add(user);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return users;
    }

    public void cleanUsersTable() {
        try(Connection connection = Util.getConnection()) {
            Statement statement = connection.createStatement();
            statement.executeUpdate(CLEAN_TABLE);

            System.out.println("Таблица очищена!");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
